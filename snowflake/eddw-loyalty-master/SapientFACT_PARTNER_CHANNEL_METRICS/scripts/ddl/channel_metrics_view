USE DATABASE EDM_VIEWS_PRD;
USE SCHEMA DW_VIEWS;

create or replace view FACT_PARTNER_ORDER_CHANNEL_METRICS(
	TXN_DATE COMMENT 'DATE WHEN TRANSACTION FULFILLED AT THE ALBERTSONS STORE.',
	HOUSEHOLD_ID COMMENT 'HOUSEHOLD ID OF THE CUSTOMER WHO MADE THE TRANSACTION. FOR PARTNER ORDERS, HOUSEHOLD_ID IS DERIVED BY JOINING THE PHONE NUMBER ENTERED AT THE ORDER LEVEL WITH CUSTOMER PHONE NUMBER IN ALBERTSON SYSTEM. FOR FIRST PARTY ORDERD HOUSEHOLD_ID IS DERIVED USING CLUB CARD NUMBER',
	BUSINESS_PARTNER_D1_SK COMMENT 'UNIQUE DELIVERY PARTNER CHANNEL ID THROUGH WHICH ORDER WAS PLACED. 1 FOR INSTACART AND 9999 FOR FIRST PARTY ORDERS',
	BANNER_D1_SK COMMENT 'UNIQUE BANNERID OF THE STORE WHERE ACTUAL TRANSACTION HAPPENED.',
	AMT_SPENT COMMENT 'TOTAL ORDER AMOUNT PAID BY THE CUSTOMER. FOR PARTNER ORDERS IT IS GROSS MERCH VALUE FOR THE ORDER AND FOR FIRST PARTY ORDER IS GROSS AMOUNT MINUS MKDN AMOUNT',
	DIVISION_D1_SK COMMENT 'UNIQUE DIVISION ID OF THE STORE WHERE ACTUAL TRANSACTION HAPPENED.',
	LOY_ACTV_ID COMMENT 'FLAG TO SPECIFY IF THE HOUSEHOLD IS DIGITALY ACTIVATED OR NOT. A HOUSEHOLD_ID IS TREATED AS DIGITALY ACTIVE IF IT HAS A ONLINE ACCOUNT AT ALBERTSONS. 1 FOR DIGITALY ACTIVATED AND 2 FOR INSTORE ACTIVATED.',
	DW_CREATE_TS COMMENT 'TIMESTAMP REPRESENTING CREATION OF RECORD IN THE TABLE'
) COMMENT='THIS TABLE CONTAINS DATE WISE TOTAL AMOUNT SPENT BY EACH HOUSEHOLD ALBERTSONS THROUGH BOTH THIRD PARTY CHANNEL OR DIRECTLY AT ALBERTSONS'
 as
WITH CAS_WEEK AS
(
SELECT
DISTINCT
FPOC.RETAIL_CUSTOMER_D1_SK,
CAS.STATUS_TYPE_CD
FROM EDM_VIEWS_PRD.DW_VIEWS.F_PARTNER_ORDER_CHANNEL_METRIC FPOC
LEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_RETAIL_CUSTOMER D1_RC ON FPOC.RETAIL_CUSTOMER_D1_SK=D1_RC.RETAIL_CUSTOMER_D1_SK
LEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.CUSTOMER_ACCOUNT_STATUS CAS ON D1_RC.RETAIL_CUSTOMER_UUID = CAS.RETAIL_CUSTOMER_UUID
AND CAS.STATUS_TYPE_CD = 'ONLINE_ENROLLMENT'
AND CAS.DW_CURRENT_VERSION_IND = TRUE
AND CAS.DW_LOGICAL_DELETE_IND = FALSE
),
CAS_WEEK_HOUSEHOLD AS
(SELECT
distinct FPOC.RETAIL_CUSTOMER_D1_SK,
HOUSEHOLD_ID
FROM EDM_VIEWS_PRD.DW_VIEWS.F_PARTNER_ORDER_CHANNEL_METRIC FPOC
LEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.D1_RETAIL_CUSTOMER D1_RC ON FPOC.RETAIL_CUSTOMER_D1_SK=D1_RC.RETAIL_CUSTOMER_D1_SK
LEFT JOIN EDM_VIEWS_PRD.DW_VIEWS.RETAIL_CUSTOMER_HOUSEHOLD RCH
ON D1_RC.RETAIL_CUSTOMER_UUID = RCH.RETAIL_CUSTOMER_UUID
where rch.household_id is not null
QUALIFY (row_number() over ( PARTITION BY RCH.RETAIL_CUSTOMER_UUID ORDER BY RCH.HOUSEHOLD_ID asc)=1))

SELECT
--DISTINCT
TRANSACTION_DT,
rch.HOUSEHOLD_ID,
BUSINESS_PARTNER_D1_SK,
BANNER_D1_SK,
SUM(ORDER_CHARGE_AMT),
DIVISION_D1_SK,
(
CASE
WHEN CAS_WEEK.STATUS_TYPE_CD IS NOT NULL THEN 1
ELSE 2
END
) LOYALTY_ACTIVE_ID,
FPOC.DW_CREATE_TS
FROM EDM_VIEWS_PRD.DW_VIEWS.F_PARTNER_ORDER_CHANNEL_METRIC FPOC
INNER JOIN CAS_week ON FPOC.RETAIL_CUSTOMER_D1_SK = CAS_week.RETAIL_CUSTOMER_D1_SK
INNER JOIN CAS_WEEK_HOUSEHOLD RCH
on FPOC.RETAIL_CUSTOMER_D1_SK = RCH.RETAIL_CUSTOMER_D1_SK
GROUP BY 1,2,3,4,6,7,8;
