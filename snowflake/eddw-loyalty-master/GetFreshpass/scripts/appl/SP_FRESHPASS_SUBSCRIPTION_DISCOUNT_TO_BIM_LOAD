--liquibase formatted sql
--changeset SYSTEM:SP_FRESHPASS_SUBSCRIPTION_DISCOUNT_TO_BIM_LOAD runOnChange:true splitStatements:false OBJECT_TYPE:SP

Use database <<EDM_DB_NAME>>;
Use schema DW_APPL;

CREATE OR REPLACE PROCEDURE "SP_FRESHPASS_SUBSCRIPTION_DISCOUNT_TO_BIM_LOAD"("SRC_WRK_TBL" VARCHAR(16777216), "CNF_DB" VARCHAR(16777216), "C_LOYAL" VARCHAR(16777216), "C_STAGE" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS
$$
      
// ************** Load for FRESHPASS_SUBSCRIPTION_DISCOUNT table BEGIN *****************
	var src_wrk_tbl = SRC_WRK_TBL;
	var temp_wrk_tbl = `${CNF_DB}.${C_STAGE}.FRESHPASS_SUBSCRIPTION_DISCOUNT_TMP_WRK`;
	var cnf_schema = C_LOYAL;
	var tgt_wrk_tbl = `${CNF_DB}.${C_STAGE}.FRESHPASS_SUBSCRIPTION_DISCOUNT_WRK`;
	var tgt_tbl = `${CNF_DB}.${cnf_schema}.FRESHPASS_SUBSCRIPTION_DISCOUNT`;
	var src_rerun_tbl = `${CNF_DB}.${C_STAGE}.FRESHPASS_SUBSCRIPTION_DISCOUNT_FLAT_RERUN`;

//query to empty the rerun queue table
	var sql_empty_rerun_tbl = `TRUNCATE TABLE ${src_rerun_tbl}`;

//query to load rerun queue table when encountered a failure
	var sql_ins_rerun_tbl = `INSERT INTO ${src_rerun_tbl} SELECT * FROM ${temp_wrk_tbl}`;

//***************** Truncate the temp work table ********************
	var truncate_temp_wrk_table = `Truncate Table ${temp_wrk_tbl}`;
	try {
		snowflake.execute ({ sqlText: truncate_temp_wrk_table });
	}
	catch (err) {
		return `Truncation of work table ${temp_wrk_tbl} Failed with error: ${err}`;   // Return a error message.
	}

// persist stream data in work table for the current transaction, includes data from previous failed run
	var sql_crt_src_wrk_tbl = `INSERT INTO `+ temp_wrk_tbl +` 
	SELECT * FROM `+ src_wrk_tbl +`
	UNION ALL
	SELECT * FROM `+ src_rerun_tbl +``;
	try {
		snowflake.execute ({sqlText: sql_crt_src_wrk_tbl });
	}
	catch (err) {
		throw "Inserting of Source Work table "+ temp_wrk_tbl +" Failed with error: " + err; // Return a error message.
	}
	
// ************************************ Truncate and Reload the work table ****************************************
	var truncate_tgt_wrk_table = `Truncate Table ${tgt_wrk_tbl}`;
	try {
		snowflake.execute ({ sqlText: truncate_tgt_wrk_table });
	}
	catch (err) {
		return `Deletion of work table ${tgt_wrk_tbl} Failed with error: ${err}`;   // Return a error message.
	}
	
// *********************** Load for Meal_Plan_Recipe table BEGIN *****************
// identify  if the columns have changed between Target table and changed dataset and create a work table specific to the BIM table. 
	var create_tgt_wrk_table = `INSERT INTO ${tgt_wrk_tbl}
								SELECT DISTINCT 
								src.DISCOUNT_TYPE_NM,
								src.SUBSCRIPTION_CD,
								src.DISCOUNT_FEE_AMT,
								src.CAMPAIGN_START_TS,
								src.CAMPAIGN_END_TS,
								src.DISCOUNT_DURATION_QTY,
								src.IS_ACTIVE_IND,
								src.TRIAL_DURATION_QTY,
								src.CAMPAIGN_THRESHOLD_QTY,
								src.ENROLLMENT_CNT,
								src.CMAPIGN_RULES_TXT,
								src.CAMPAIGN_TYPE_NM,
								src.CAMPAIGN_TITLE_NM,
								src.CAMPAIGN_SAVINGS_TXT ,
								src.CATEGORY_NM,
								src.CREATE_TS,
								src.CREATE_USER_ID,
								src.UPDATE_TS,
								src.UPDATE_USER_ID,
								src.FILENAME,
								src.DW_CREATE_TS,
								case when tgt.Discount_Type_Nm is null then 'I' else 'U' end as DML_TYPE,
								case when tgt.DW_FIRST_EFFECTIVE_DT = CURRENT_DATE then '1' else '0' end as SAMEDAY_CHNG_IND
								FROM(
									SELECT 
									DISCOUNT_TYPE_NM,
									SUBSCRIPTION_CD,
									DISCOUNT_FEE_AMT,
									CAMPAIGN_START_TS,
									CAMPAIGN_END_TS,
									DISCOUNT_DURATION_QTY,
									IS_ACTIVE_IND,
									TRIAL_DURATION_QTY,
									CAMPAIGN_THRESHOLD_QTY,
									ENROLLMENT_CNT,
									CMAPIGN_RULES_TXT,
									CAMPAIGN_TYPE_NM,
									CAMPAIGN_TITLE_NM,
									CAMPAIGN_SAVINGS_TXT ,
									CATEGORY_NM,
									CREATE_TS,
									CREATE_USER_ID,
									UPDATE_TS,
									UPDATE_USER_ID,
									FILENAME,
									DW_CREATE_TS
									FROM(
										SELECT 
										DISCOUNT_TYPE_NM,
										SUBSCRIPTION_CD,
										DISCOUNT_FEE_AMT,
										CAMPAIGN_START_TS,
										CAMPAIGN_END_TS,
										DISCOUNT_DURATION_QTY,
										IS_ACTIVE_IND,
										TRIAL_DURATION_QTY,
										CAMPAIGN_THRESHOLD_QTY,
										ENROLLMENT_CNT,
										CMAPIGN_RULES_TXT,
										CAMPAIGN_TYPE_NM,
										CAMPAIGN_TITLE_NM,
										CAMPAIGN_SAVINGS_TXT,
										CATEGORY_NM,
										CREATE_TS,
										CREATE_USER_ID,
										UPDATE_TS,
										UPDATE_USER_ID,
										FILENAME,
										DW_CREATE_TS,
										Row_number() OVER (
										PARTITION BY Discount_Type_Nm
										order by DW_CREATE_TS,Create_Ts,Update_Ts DESC) as rn
										FROM(
											SELECT
											DISCOUNTTYPE AS DISCOUNT_TYPE_NM,
											SUBSCRIPTIONCODE AS SUBSCRIPTION_CD,
											TO_NUMBER(DISCOUNTEDFEE,6,2) AS DISCOUNT_FEE_AMT,
											TO_TIMESTAMP_NTZ(CAMPAIGNSTARTDATE) AS CAMPAIGN_START_TS,
											TO_TIMESTAMP_NTZ(CAMPAIGNENDDATE) AS CAMPAIGN_END_TS,
											TO_NUMBER(DISCOUNTDURATION) AS DISCOUNT_DURATION_QTY,
											TO_BOOLEAN(ISACTIVE) AS IS_ACTIVE_IND,
											TO_NUMBER(TRIALDURATION) AS TRIAL_DURATION_QTY,
											TO_NUMBER(CAMPAIGNTHRESHOLD) AS CAMPAIGN_THRESHOLD_QTY,
											TO_NUMBER(ENROLLMENTCOUNT) AS ENROLLMENT_CNT,
											CAMPAIGNRULES AS CMAPIGN_RULES_TXT,
											CAMPAIGNTYPE AS CAMPAIGN_TYPE_NM,
											CAMPAIGNTITLE AS CAMPAIGN_TITLE_NM,
											CAMPAIGNSAVINGS AS CAMPAIGN_SAVINGS_TXT,
											CATEGORY AS CATEGORY_NM,
											TO_TIMESTAMP_NTZ(CREATEDON) AS CREATE_TS,
											CREATEDBY AS CREATE_USER_ID,
											TO_TIMESTAMP_NTZ(MODIFIEDON) AS UPDATE_TS,
											MODIFIEDBY AS UPDATE_USER_ID,
											FILENAME,
											DW_CREATETS AS DW_CREATE_TS
											FROM 
											${temp_wrk_tbl} TWT
											)
										)where rn=1
									)src
                                    left outer join ${tgt_tbl} TGT on 
                                    tgt.Discount_Type_Nm = src.Discount_Type_Nm
                                    and tgt.DW_CURRENT_VERSION_IND=True`;
	try {
    //return create_tgt_wrk_table
	snowflake.execute ({ sqlText: create_tgt_wrk_table });
	}
	catch (err) {
	snowflake.execute ({ sqlText: sql_ins_rerun_tbl});
	return `Inserting of work table ${tgt_wrk_tbl} Failed with error: ${err}`;   // Return a error message.
	}
	

// Transaction for Updates, Insert begins     
    var sql_begin = "BEGIN"
                                               
	var sql_Delete_Check = `UPDATE ${tgt_tbl} as tgt
							SET 
							DW_Last_Effective_dt = CURRENT_DATE - 1,
							DW_CURRENT_VERSION_IND = FALSE,
							DW_LAST_UPDATE_TS = CURRENT_TIMESTAMP,
							DW_LOGICAL_DELETE_IND = TRUE 
							from( 
								SELECT
								Discount_Type_Nm
								from  ${tgt_wrk_tbl} as b 
								where DML_TYPE = 'U' 
							) src
							where tgt.Discount_Type_Nm = src.Discount_Type_Nm
							and tgt.DW_CURRENT_VERSION_IND = True`;
				  
					  
		
	// Processing Inserts
	var sql_inserts = `INSERT INTO ${tgt_tbl} 
						(
						DISCOUNT_TYPE_NM,
						DW_FIRST_EFFECTIVE_DT,
						DW_LAST_EFFECTIVE_DT,
						SUBSCRIPTION_CD,
						DISCOUNT_FEE_AMT,
						CAMPAIGN_START_TS,
						CAMPAIGN_END_TS,
						DISCOUNT_DURATION_QTY,
						IS_ACTIVE_IND,
						TRIAL_DURATION_QTY,
						CAMPAIGN_THRESHOLD_QTY,
						ENROLLMENT_CNT,
						CMAPIGN_RULES_TXT,
						CAMPAIGN_TYPE_NM,
						CAMPAIGN_TITLE_NM,
						CAMPAIGN_SAVINGS_TXT ,
						CATEGORY_NM,
						CREATE_TS,
						CREATE_USER_ID,
						UPDATE_TS,
						UPDATE_USER_ID,
						DW_CREATE_TS,
						DW_LAST_UPDATE_TS,
						DW_LOGICAL_DELETE_IND,
						DW_SOURCE_CREATE_NM,
						DW_SOURCE_UPDATE_NM,
						DW_CURRENT_VERSION_IND 
						)
						SELECT 
						DISCOUNT_TYPE_NM,
						CURRENT_DATE,        
						'31-DEC-9999',
						SUBSCRIPTION_CD,
						DISCOUNT_FEE_AMT,
						CAMPAIGN_START_TS,
						CAMPAIGN_END_TS,
						DISCOUNT_DURATION_QTY,
						IS_ACTIVE_IND,
						TRIAL_DURATION_QTY,
						CAMPAIGN_THRESHOLD_QTY,
						ENROLLMENT_CNT,
						CMAPIGN_RULES_TXT,
						CAMPAIGN_TYPE_NM,
						CAMPAIGN_TITLE_NM,
						CAMPAIGN_SAVINGS_TXT ,
						CATEGORY_NM,
						CREATE_TS,
						CREATE_USER_ID,
						UPDATE_TS,
						UPDATE_USER_ID,
						CURRENT_TIMESTAMP,
						CURRENT_TIMESTAMP,
						FALSE,
						FILENAME,         
						NULL,
						TRUE
						FROM ${tgt_wrk_tbl}
						WHERE
						DML_TYPE in ('I','U')`;
    
	var sql_commit = "COMMIT";
	var sql_rollback = "ROLLBACK";
    
	try {
        snowflake.execute ({ sqlText: sql_begin });
		snowflake.execute ({ sqlText: sql_empty_rerun_tbl });
		snowflake.execute ({ sqlText: sql_Delete_Check });
        //snowflake.execute ({ sqlText: sql_delete });
        snowflake.execute ({ sqlText: sql_inserts });
        snowflake.execute ({ sqlText: sql_commit });
		} 
	catch (err) {
				snowflake.execute ({ sqlText: sql_rollback });
				snowflake.execute ({ sqlText: sql_ins_rerun_tbl});
				return `Loading of table ${tgt_tbl} Failed with error: ${err}` ;   // Return a error message.
				}	
                               
// ************** Load for FRESHPASS_SUBSCRIPTION_DISCOUNT table END *****************
				
$$;
